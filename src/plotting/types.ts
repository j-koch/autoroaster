/**
 * Plotting Types and Interfaces
 * 
 * Defines TypeScript interfaces for chart management and configuration.
 * These types ensure type safety when working with Plotly charts.
 */

/**
 * Chart Data Structure
 * 
 * Represents time-series data for plotting.
 * Used for temperature curves, control inputs, etc.
 */
export interface ChartData {
  /** Time points (x-axis) in minutes */
  time: number[];
  /** Data values (y-axis) - temperatures, control values, etc. */
  values: number[];
}

/**
 * Temperature Data Collection
 * 
 * Complete set of temperature measurements from the roaster simulator.
 * Each property contains an array of temperature values (°C) at each timestep.
 */
export interface TemperatureData {
  /** Bean probe temperature (T_bm) - measured temperature inside beans */
  bean: number[];
  /** Bean surface temperature (T_b) - latent temperature at bean surface */
  environment: number[];
  /** Roaster drum temperature (T_r) - drum metal temperature */
  roaster: number[];
  /** Air temperature (T_air) - temperature of air in roasting chamber */
  air: number[];
  /** Measured air temperature (T_atm) - environment probe reading */
  airMeasured: number[];
}

/**
 * Control Data Collection
 * 
 * Time series of control inputs applied to the roaster.
 * All values are normalized to [0, 1] range.
 */
export interface ControlData {
  /** Heater power (0-1) */
  heater: number[];
  /** Fan speed (0-1) */
  fan: number[];
  /** Drum speed (0-1, typically fixed) */
  drum: number[];
}

/**
 * Forecast Data Structure
 * 
 * Contains predicted future temperatures and derived quantities.
 * Generated by running the simulator forward with fixed control inputs.
 */
export interface ForecastData {
  /** Time points for forecast (minutes, relative to current time) */
  time: number[];
  /** Predicted bean probe temperatures (°C) */
  bean: number[];
  /** Predicted bean surface temperatures (°C) */
  environment: number[];
  /** Predicted roaster temperatures (°C) */
  roaster: number[];
  /** Predicted air temperatures (°C) */
  air: number[];
  /** Predicted rate of rise (°C/min) */
  rateOfRise: number[];
}

/**
 * Plotly Trace Configuration
 * 
 * Configuration for a single trace (line/scatter plot) in a Plotly chart.
 * Simplified interface covering most common options.
 */
export interface PlotlyTrace {
  /** X-axis data */
  x: number[];
  /** Y-axis data */
  y: number[];
  /** Display name for legend */
  name: string;
  /** Line style configuration */
  line?: {
    color?: string;
    width?: number;
    dash?: 'solid' | 'dot' | 'dash' | 'dashdot';
  };
  /** Plot mode: 'lines', 'markers', or 'lines+markers' */
  mode?: 'lines' | 'markers' | 'lines+markers';
  /** Y-axis to use ('y' or 'y2' for dual-axis plots) */
  yaxis?: 'y' | 'y2';
  /** Opacity (0-1) */
  opacity?: number;
  /** Show in legend? */
  showlegend?: boolean;
  /** Custom hover template */
  hovertemplate?: string;
}

/**
 * Plotly Layout Configuration
 * 
 * Configuration for chart layout including axes, title, etc.
 * Simplified interface for common options.
 */
export interface PlotlyLayout {
  /** Chart title */
  title?: string;
  /** X-axis configuration */
  xaxis?: {
    title?: string;
    range?: [number, number];
    gridcolor?: string;
  };
  /** Primary Y-axis configuration */
  yaxis?: {
    title?: string;
    range?: [number, number];
    side?: 'left' | 'right';
    gridcolor?: string;
  };
  /** Secondary Y-axis configuration (for dual-axis plots) */
  yaxis2?: {
    title?: string;
    range?: [number, number];
    side?: 'left' | 'right';
    overlaying?: 'y';
    showgrid?: boolean;
    zeroline?: boolean;
    zerolinecolor?: string;
    zerolinewidth?: number;
  };
  /** Show legend? */
  showlegend?: boolean;
  /** Chart margin */
  margin?: {
    t?: number;
    r?: number;
    b?: number;
    l?: number;
  };
  /** Hover mode: 'closest', 'x', 'y', false */
  hovermode?: 'closest' | 'x' | 'y' | false;
  /** Vertical line annotations */
  shapes?: PlotlyShape[];
}

/**
 * Plotly Shape (for annotations like vertical lines)
 */
export interface PlotlyShape {
  type: 'line' | 'rect' | 'circle';
  x0: number;
  x1: number;
  y0: number | string;  // Can use 'paper' coordinates
  y1: number | string;
  yref?: 'paper' | 'y' | 'y2';
  line?: {
    color?: string;
    width?: number;
    dash?: string;
  };
}

/**
 * Chart Update Data
 * 
 * Data structure for updating existing Plotly charts.
 * Used to efficiently update chart data without full re-render.
 */
export interface ChartUpdate {
  /** Arrays of x-data for each trace */
  x?: number[][];
  /** Arrays of y-data for each trace */
  y?: number[][];
  /** Which traces to update (indices) */
  traces?: number[];
}

/**
 * Chart Manager Configuration
 * 
 * Configuration options for the ChartManager class.
 */
export interface ChartManagerConfig {
  /** ID of temperature chart div */
  temperatureChartId: string;
  /** ID of control chart div */
  controlChartId: string;
  /** Maximum time range for x-axis (minutes) */
  maxTimeRange: number;
  /** Maximum temperature for y-axis (°C) */
  maxTemp: number;
  /** Enable responsive sizing? */
  responsive: boolean;
}
